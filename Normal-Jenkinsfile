def COLOR_MAP = [
    'FAILURE' : 'danger',
    'SUCCESS' : 'good'
]

def userInput = false

pipeline{
    agent any
    tools{
        jdk 'jdk17'
        nodejs 'node18'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    }
    stages {
        stage('clean workspace'){
            steps{
                cleanWs()
            }
        }
        stage('Approval email'){
            steps{
                emailext (
                    subject: "Waiting for your Approval! Job: '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                    body: '''${JELLY_SCRIPT,template="html"}
                        <h2>Started: Job '${JOB_NAME} ${BUILD_NUMBER}':</h2>
                        <h3>Please approve the build '${BUILD_NUMBER}'</h3>
                        <h3>To Approve Please click here:</h3><br>
                        <a href="${BUILD_URL}input"><button><b>Approve</b></button></a></h3>
                    ''', mimeType: 'text/html',
                    to: 'saksuriya@dtac.co.th, info@mail.com'
                )
                echo "Promotion triggered by email"
            }
        }
        stage('Get approval'){
            steps{
                script {                    
                    userInput = input(id: 'Approve', 
                                        message: 'Approve build?', 
                                        parameters: [[$class: 'BooleanParameterDefinition', defaultValue: true, description: '', name: 'Please confirm you agree with this']], 
                                        ok: 'Approve'
                                    )
                    echo 'userInput: ' + userInput
                    if(userInput == true) {
                        echo "Build has been approved"
                    }
                    else {
                        echo "Action was aborted."
                    }
                }
            }
        }
        stage('verify Approval'){
        when { expression { userInput == true}}    
            steps{
                script{
                    echo "Next stage.."
                }
            }
        }
        stage('checkout from Git'){
            steps{
                git branch: 'main', url: 'https://github.com/Saksuriyas/poc-app-youtube.git'
            }
        }
        stage('sonarqube Analysis'){
            steps{
                withSonarQubeEnv('sonar-server') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=youtube \
                    -Dsonar.projectKey=youtube '''
                }
            }
        }
        stage('sonarqube QualitGate'){
           steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            } 
        }
        stage('Npm Install') {
            steps {
                sh "npm install"
            }
        }
		stage('Trivy file scan') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }       
        stage('Docker Build'){
            steps{
                script{
                   withDockerRegistry(credentialsId: 'docker', toolName: 'docker'){   
                       sh "docker build -t youtube ."
                       sh "docker tag youtube saksuriyas/youtube:latest "
                       sh "docker push saksuriyas/youtube:latest "
                    }
                }
            }
        }
        stage('Trivy iamge'){
            steps{
                sh "trivy image saksuriyas/youtube:latest > trivyimage.txt" 
            }
        }
        stage('Run container'){
            steps{
                sh 'docker run -d --name youtube -p 3000:3000 saksuriyas/youtube:latest'
            }
        }
        stage('Kube deploy'){
            steps{
                script{
                    withKubeConfig(caCertificate: '', clusterName: '', contextName: '', credentialsId: 'k8s', namespace: '', restrictKubeConfigAccess: false, serverUrl: '') {
                        sh 'kubectl apply -f deployment.yml'
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Slack Notifications'
            slackSend (
                channel: '#jenkins',
                color: COLOR_MAP[currentBuild.currentResult],
                message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} \n build ${env.BUILD_NUMBER} \n More info at: ${env.BUILD_URL}"
            )
            echo 'Email Notifications'
            emailext (
                attachLog: true,
                subject: "'${currentBuild.result}'",
                body: "Project: ${env.JOB_NAME}<br/>" +
                    "Build Number: ${env.BUILD_NUMBER}<br/>" +
                    "URL: ${env.BUILD_URL}<br/>",
                to: 'saksuriya@dtac.co.th',
                attachmentsPattern: 'trivy.txt'
            )
        }
    }
}